{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { getRecurrenceStringFromDate, generate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\n * Schedule CRUD operations\n */\n\nvar Crud =\n/** @class */\nfunction () {\n  function Crud(parent) {\n    this.parent = parent;\n    this.crudObj = {\n      sourceEvent: null,\n      targetEvent: null,\n      isCrudAction: false\n    };\n  }\n\n  Crud.prototype.getQuery = function () {\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    return this.parent.dataModule.generateQuery(start, end);\n  };\n\n  Crud.prototype.getTable = function () {\n    if (this.parent.eventSettings.query) {\n      var query = this.parent.eventSettings.query.clone();\n      return query.fromTable;\n    }\n\n    return null;\n  };\n\n  Crud.prototype.refreshData = function (args) {\n    var _this = this;\n\n    var actionArgs = {\n      requestType: args.requestType,\n      cancel: false,\n      data: args.data,\n      addedRecords: args.editParms.addedRecords,\n      changedRecords: args.editParms.changedRecords,\n      deletedRecords: args.editParms.deletedRecords\n    };\n\n    if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {\n      this.parent.dragAndDropModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {\n      this.parent.resizeModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.activeViewOptions.group.allowGroupEdit && !this.parent.rowAutoHeight && !this.parent.virtualScrollModule && this.parent.activeViewOptions.group.byGroupID) {\n      if (args.requestType === 'eventCreated' || args.requestType === 'eventRemoved') {\n        this.crudObj.isCrudAction = true;\n        this.crudObj.sourceEvent = [];\n        var crudData = args.data instanceof Array ? args.data : (typeof args.data === 'string' || typeof args.data === 'number') && args.requestType === 'eventRemoved' ? args.editParms.deletedRecords : [args.data];\n\n        var _loop_1 = function (data) {\n          this_1.crudObj.isCrudAction = !(args.requestType === 'eventRemoved' && !isNullOrUndefined(data.parent));\n          var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data);\n\n          if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function (tdData) {\n            return tdData.groupIndex === groupIndex;\n          }).length === 0 && this_1.crudObj.isCrudAction) {\n            this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[groupIndex]);\n          }\n        };\n\n        var this_1 = this;\n\n        for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {\n          var data = crudData_1[_i];\n\n          _loop_1(data);\n        }\n\n        this.crudObj.targetEvent = this.crudObj.sourceEvent;\n      }\n    }\n\n    if (this.parent.dataModule.dataManager.dataSource.offline) {\n      this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n        if (!offlineArgs.cancel) {\n          _this.parent.renderModule.refreshDataManager();\n        }\n      });\n    } else {\n      args.promise.then(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {\n          if (!onlineArgs.cancel) {\n            _this.parent.renderModule.refreshDataManager();\n          }\n        });\n      }).catch(function (e) {\n        if (_this.parent.isDestroyed) {\n          return;\n        } // tslint:disable:no-any\n\n\n        _this.parent.trigger(events.actionFailure, {\n          error: isBlazor() ? e.error.toString() : e\n        }); // tslint:disable:no-any\n\n      });\n    }\n  };\n\n  Crud.prototype.addEvent = function (eventData) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowAdding) {\n      if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      var addEvents = eventData instanceof Array ? eventData : [eventData];\n      var args = {\n        requestType: 'eventCreate',\n        cancel: false,\n        addedRecords: addEvents,\n        changedRecords: [],\n        deletedRecords: []\n      };\n\n      if (!isBlazor()) {\n        args.data = addEvents;\n      }\n\n      this.parent.trigger(events.actionBegin, args, function (addArgs) {\n        _this.serializeData(addArgs.addedRecords);\n\n        if (!addArgs.cancel) {\n          var fields = _this.parent.eventFields;\n          var editParms = {\n            addedRecords: [],\n            changedRecords: [],\n            deletedRecords: []\n          };\n          var promise = void 0;\n\n          if (addArgs.addedRecords instanceof Array) {\n            for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n              var event_1 = _a[_i];\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(event_1, true));\n            } // tslint:disable-next-line:max-line-length\n\n\n            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n          } else {\n            var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n\n            editParms.addedRecords.push(event_2);\n            promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n          }\n\n          var crudArgs = {\n            requestType: 'eventCreated',\n            cancel: false,\n            data: addArgs.addedRecords,\n            promise: promise,\n            editParms: editParms\n          };\n\n          _this.refreshData(crudArgs);\n        }\n      });\n    }\n  };\n\n  Crud.prototype.saveEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowEditing) {\n      if (this.parent.currentAction !== 'EditFollowingEvents' && !this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData instanceof Array ? [eventData] : eventData);\n        return;\n      }\n\n      this.parent.currentAction = action;\n\n      if (action) {\n        switch (action) {\n          case 'EditOccurrence':\n            this.processOccurrences(eventData, action);\n            break;\n\n          case 'EditFollowingEvents':\n            this.processFollowSeries(eventData, action);\n            break;\n\n          case 'EditSeries':\n            this.processEntireSeries(eventData, action);\n            break;\n        }\n      } else {\n        var updateEvents = eventData instanceof Array ? eventData : [eventData];\n        var args = {\n          requestType: 'eventChange',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: updateEvents,\n          deletedRecords: []\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (saveArgs) {\n          _this.serializeData(saveArgs.changedRecords);\n\n          if (!saveArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (saveArgs.changedRecords instanceof Array) {\n              for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                var event_3 = _a[_i];\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(event_3, true));\n              } // tslint:disable-next-line:max-line-length\n\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n\n              editParms.changedRecords.push(event_4); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n            }\n\n            var crudArgs = {\n              requestType: 'eventChanged',\n              cancel: false,\n              data: saveArgs.changedRecords,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.deleteEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowDeleting) {\n      this.parent.currentAction = action;\n      var deleteEvents = [];\n\n      if (typeof eventData === 'string' || typeof eventData === 'number') {\n        deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n          return eventObj[_this.parent.eventFields.id] === eventData;\n        });\n      } else {\n        deleteEvents = eventData instanceof Array ? eventData : [eventData];\n      }\n\n      if (action) {\n        switch (action) {\n          case 'Delete':\n            this.processEventDelete(deleteEvents);\n            break;\n\n          case 'DeleteOccurrence':\n            this.processOccurrences(deleteEvents, action);\n            break;\n\n          case 'DeleteFollowingEvents':\n            this.processFollowSeries(deleteEvents, action);\n            break;\n\n          case 'DeleteSeries':\n            this.processEntireSeries(deleteEvents, action);\n            break;\n        }\n      } else {\n        var args = {\n          requestType: 'eventRemove',\n          cancel: false,\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: deleteEvents\n        };\n\n        if (!isBlazor()) {\n          args.data = eventData;\n        }\n\n        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n          _this.serializeData(deleteArgs.deletedRecords);\n\n          if (!deleteArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParms = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (deleteArgs.deletedRecords.length > 1) {\n              editParms.deletedRecords = editParms.deletedRecords.concat(deleteArgs.deletedRecords); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              editParms.deletedRecords.push(deleteArgs.deletedRecords[0]); // tslint:disable-next-line:max-line-length\n\n              promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n            }\n\n            _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n\n            var crudArgs = {\n              requestType: 'eventRemoved',\n              cancel: false,\n              data: deleteArgs.deletedRecords,\n              promise: promise,\n              editParms: editParms\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.processOccurrences = function (eventData, action) {\n    var _this = this;\n\n    var occurenceData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n        var event_5 = eventData_1[_i];\n        occurenceData.push({\n          occurrence: event_5,\n          parent: this.getParentEvent(event_5)\n        });\n      }\n    } else {\n      occurenceData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = occurenceData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (occurenceArgs) {\n      _this.serializeData(occurenceArgs.changedRecords);\n\n      if (!occurenceArgs.cancel) {\n        var fields = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var occurrenceEvents = occurenceData instanceof Array ? occurenceData : [occurenceData];\n\n        var _loop_2 = function (a, count) {\n          var childEvent = occurenceArgs.changedRecords[a];\n          var parentEvent = occurrenceEvents[a].parent;\n          var parentException = parentEvent[fields.recurrenceException];\n\n          switch (action) {\n            case 'EditOccurrence':\n              var editedData = _this.parent.eventsProcessed.filter(function (event) {\n                return event.Guid === childEvent.Guid;\n              })[0];\n\n              var exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n\n              if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = exceptionDate;\n                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                childEvent[fields.followingID] = null;\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              } else {\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              }\n\n              break;\n\n            case 'DeleteOccurrence':\n              if (!childEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              }\n\n              if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                editParms.deletedRecords.push(childEvent);\n                isDeletedRecords = true;\n              }\n\n              break;\n          }\n        };\n\n        for (var a = 0, count = occurenceArgs.changedRecords.length; a < count; a++) {\n          _loop_2(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(occurenceArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? occurenceArgs.deletedRecords : occurenceArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processFollowSeries = function (eventData, action) {\n    var _this = this;\n\n    var followData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n        var event_6 = eventData_2[_i];\n        followData.push({\n          occurrence: event_6,\n          parent: this.getParentEvent(event_6)\n        });\n      }\n    } else {\n      followData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateFollowEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = followData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (followArgs) {\n      _this.serializeData(followArgs.changedRecords);\n\n      if (!followArgs.cancel) {\n        var fields_1 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var followEvents = followData instanceof Array ? followData : [followData];\n\n        var _loop_3 = function (a, count) {\n          var childEvent = followArgs.changedRecords[a];\n          var parentEvent = followEvents[a].parent;\n\n          var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n\n          switch (action) {\n            case 'EditFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent);\n\n              var isSplitted = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n              childEvent[fields_1.followingID] = isSplitted ? null : parentEvent[fields_1.id];\n              childEvent[fields_1.recurrenceID] = null;\n              editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n\n              if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                childEvent[fields_1.recurrenceException] = null;\n\n                if (followData_1.occurrence.length > 0) {\n                  var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n\n                  if (rule.indexOf('COUNT') === -1) {\n                    childEvent[fields_1.recurrenceRule] = rule;\n                  }\n                }\n\n                if (followData_1.follow.length > 0) {\n                  childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                  editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.follow);\n                }\n\n                if (isSplitted) {\n                  followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                    return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                  });\n                }\n\n                editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence);\n              }\n\n              break;\n\n            case 'DeleteFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n              break;\n          }\n        };\n\n        for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n          _loop_3(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_1.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: followArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEntireSeries = function (eventData, action) {\n    var _this = this;\n\n    var seriesData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n        var event_7 = eventData_3[_i];\n        seriesData.push(this.getParentEvent(event_7, true));\n      }\n    } else {\n      seriesData = this.getParentEvent(eventData, true);\n    }\n\n    var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateSeriesEvents,\n      deletedRecords: []\n    };\n\n    if (!isBlazor()) {\n      args.data = seriesData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (seriesArgs) {\n      _this.serializeData(seriesArgs.changedRecords);\n\n      if (!seriesArgs.cancel) {\n        var fields_2 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n\n        var _loop_4 = function (a, count) {\n          var childEvent = seriesArgs.changedRecords[a];\n          var parentEvent = seriesEvents[a];\n\n          var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n\n          var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n\n          switch (action) {\n            case 'EditSeries':\n              if (childEvent[fields_2.startTime] > parentEvent[fields_2.startTime]) {\n                _this.processRecurrenceRule(parentEvent, childEvent);\n              }\n\n              childEvent[fields_2.id] = parentEvent[fields_2.id];\n              childEvent[fields_2.recurrenceID] = null;\n              childEvent[fields_2.followingID] = null;\n\n              if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                  return eventObj[fields_2.id] === childEvent[fields_2.id];\n                });\n\n                if (originalParent.length > 0) {\n                  childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                }\n              } else {\n                childEvent[fields_2.recurrenceException] = null;\n                editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents);\n              }\n\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              _this.parent.uiStateValues.isIgnoreOccurrence = false;\n              break;\n\n            case 'DeleteSeries':\n              editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents.concat(parentEvent));\n              isDeletedRecords = true;\n              break;\n          }\n        };\n\n        for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n          _loop_4(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_2.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEventDelete = function (eventData) {\n    var _this = this;\n\n    var deleteData = [];\n\n    for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n      var eventObj = eventData_4[_i];\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        deleteData.push({\n          occurrence: eventObj,\n          parent: this.getParentEvent(eventObj)\n        });\n      } else {\n        deleteData.push(eventObj);\n      }\n    }\n\n    var args = {\n      requestType: 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: eventData\n    };\n\n    if (!isBlazor()) {\n      args.data = deleteData;\n    }\n\n    this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n      _this.serializeData(deleteArgs.deletedRecords);\n\n      if (!deleteArgs.cancel) {\n        var fields_3 = _this.parent.eventFields;\n        var editParms = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n\n        var _loop_5 = function (a, count) {\n          var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[a][_this.parent.eventFields.recurrenceRule]);\n\n          if (!isDelete) {\n            var parentEvent_1 = deleteData[a].parent;\n            var isEdited = editParms.changedRecords.filter(function (obj) {\n              return obj[fields_3.id] === parentEvent_1[fields_3.id];\n            });\n            var editedDate = deleteArgs.deletedRecords[a][fields_3.startTime];\n\n            if (isEdited.length > 0) {\n              var editedData = isEdited[0];\n              editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n            } else {\n              parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n            }\n\n            if (isEdited.length === 0) {\n              editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n            }\n\n            isDelete = deleteArgs.deletedRecords[a][fields_3.id] !== parentEvent_1[fields_3.id];\n          }\n\n          if (isDelete) {\n            editParms.deletedRecords.push(deleteArgs.deletedRecords[a]);\n          }\n        };\n\n        for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n          _loop_5(a, count);\n        } // tslint:disable-next-line:max-line-length\n\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_3.id, _this.getTable(), _this.getQuery());\n\n        var crudArgs = {\n          requestType: 'eventRemoved',\n          cancel: false,\n          data: deleteArgs.deletedRecords,\n          promise: promise,\n          editParms: editParms\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.serializeData = function (eventData) {\n    if (isBlazor()) {\n      var eventFields = this.parent.eventFields;\n\n      for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n        var event_8 = _a[_i];\n        event_8[eventFields.startTime] = this.parent.getDateTime(event_8[eventFields.startTime]);\n        event_8[eventFields.endTime] = this.parent.getDateTime(event_8[eventFields.endTime]);\n      }\n    }\n  };\n\n  Crud.prototype.getParentEvent = function (event, isParent) {\n    if (isParent === void 0) {\n      isParent = false;\n    }\n\n    var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n\n    if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n      this.parent.eventBase.timezoneConvert(parentEvent);\n    }\n\n    return parentEvent;\n  };\n\n  Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n    var exDate = getRecurrenceStringFromDate(eventStartTime);\n\n    if (!isNullOrUndefined(exceptionDateList)) {\n      if (exceptionDateList.indexOf(exDate) === -1) {\n        exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + ',' + exDate : exDate;\n      }\n    } else {\n      exceptionDateList = exDate;\n    }\n\n    return exceptionDateList;\n  };\n\n  Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n    var fields = this.parent.eventFields;\n    var recurrenceRule = parentEvent[fields.recurrenceRule];\n    var endDate;\n\n    if (followEvent instanceof Date) {\n      endDate = new Date(+followEvent);\n    } else {\n      endDate = new Date(+followEvent[fields.startTime]);\n      var newRecurrenceRule = followEvent[fields.recurrenceRule];\n      var startDate = parentEvent[fields.startTime];\n      var ruleException = this.parent.currentAction === 'DeleteFollowingEvents' ? followEvent[fields.recurrenceException] : null;\n      var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n      var untilDate = new Date(dateCollection.slice(-1)[0]);\n      untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());\n      endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());\n      followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, new Date(+untilDate), false);\n    }\n\n    parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, util.addDays(new Date(endDate.getTime()), -1), true);\n  };\n\n  Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n    var splitRule = recurrenceRule.split(';');\n    var updatedRule = '';\n\n    for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n      var rule = splitRule_1[_i];\n\n      if (rule !== '') {\n        var ruleKey = rule.split('=')[0];\n        var ruleValue = rule.split('=')[1];\n\n        if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n          ruleValue = getRecurrenceStringFromDate(untilDate);\n          rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n        }\n\n        updatedRule += rule + ';';\n      }\n    }\n\n    if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n      updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n    }\n\n    return updatedRule;\n  };\n\n  Crud.prototype.isBlockEvent = function (eventData) {\n    var eventCollection = eventData instanceof Array ? eventData : [eventData];\n    var value = false;\n\n    for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n      var event_9 = eventCollection_1[_i];\n      value = event_9[this.parent.eventFields.isBlock] || false;\n    }\n\n    return value;\n  };\n\n  return Crud;\n}();\n\nexport { Crud };","map":{"version":3,"sources":["C:/Users/rraval/Desktop/schedule-component-copy/node_modules/@syncfusion/ej2-schedule/src/schedule/actions/crud.js"],"names":["isNullOrUndefined","isBlazor","getRecurrenceStringFromDate","generate","events","util","Crud","parent","crudObj","sourceEvent","targetEvent","isCrudAction","prototype","getQuery","start","activeView","startDate","end","endDate","dataModule","generateQuery","getTable","eventSettings","query","clone","fromTable","refreshData","args","_this","actionArgs","requestType","cancel","data","addedRecords","editParms","changedRecords","deletedRecords","dragAndDropModule","actionObj","element","style","display","resizeModule","activeViewOptions","group","resources","length","allowGroupEdit","rowAutoHeight","virtualScrollModule","byGroupID","crudData","Array","_loop_1","this_1","groupIndex","eventBase","getGroupIndexFromEvent","crudModule","filter","tdData","push","resourceBase","lastResourceLevel","_i","crudData_1","dataManager","dataSource","offline","trigger","actionComplete","offlineArgs","renderModule","refreshDataManager","promise","then","e","isDestroyed","onlineArgs","catch","actionFailure","error","toString","addEvent","eventData","allowAdding","isBlockEvent","isBlockRange","quickPopup","openValidationError","addEvents","actionBegin","addArgs","serializeData","fields","eventFields","_a","event_1","processTimezone","saveChanges","id","event_2","insert","crudArgs","saveEvent","action","allowEditing","currentAction","processOccurrences","processFollowSeries","processEntireSeries","updateEvents","saveArgs","event_3","event_4","update","deleteEvent","allowDeleting","deleteEvents","eventsData","eventObj","processEventDelete","deleteArgs","concat","remove","selectWorkCellByTime","occurenceData","isDeletedRecords","eventData_1","event_5","occurrence","getParentEvent","occurenceArgs","occurrenceEvents","_loop_2","a","count","childEvent","parentEvent","parentException","recurrenceException","editedData","eventsProcessed","event","Guid","exceptionDate","excludeDateCheck","startTime","recurrenceID","followingID","followData","eventData_2","event_6","updateFollowEvents","followArgs","fields_1","followEvents","_loop_3","followData_1","getEventCollections","processRecurrenceRule","isSplitted","isFollowingEvent","uiStateValues","isIgnoreOccurrence","rule","slice","recurrenceRule","indexOf","follow","seriesData","eventData_3","event_7","updateSeriesEvents","seriesArgs","fields_2","seriesEvents","_loop_4","eventCollections","deletedEvents","originalParent","deleteData","eventData_4","fields_3","_loop_5","isDelete","parentEvent_1","isEdited","obj","editedDate","event_8","getDateTime","endTime","isParent","startTimezone","endTimezone","timezoneConvert","eventStartTime","exceptionDateList","exDate","followEvent","Date","newRecurrenceRule","ruleException","dateCollection","firstDayOfWeek","untilDate","setHours","getHours","getMinutes","getSeconds","getUpdatedRecurrenceRule","addDays","getTime","splitRule","split","updatedRule","splitRule_1","ruleKey","ruleValue","replace","eventCollection","value","eventCollection_1","event_9","isBlock"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { getRecurrenceStringFromDate, generate } from '../../recurrence-editor/date-generator';\nimport * as events from '../base/constant';\nimport * as util from '../base/util';\n/**\n * Schedule CRUD operations\n */\nvar Crud = /** @class */ (function () {\n    function Crud(parent) {\n        this.parent = parent;\n        this.crudObj = { sourceEvent: null, targetEvent: null, isCrudAction: false };\n    }\n    Crud.prototype.getQuery = function () {\n        var start = this.parent.activeView.startDate();\n        var end = this.parent.activeView.endDate();\n        return this.parent.dataModule.generateQuery(start, end);\n    };\n    Crud.prototype.getTable = function () {\n        if (this.parent.eventSettings.query) {\n            var query = this.parent.eventSettings.query.clone();\n            return query.fromTable;\n        }\n        return null;\n    };\n    Crud.prototype.refreshData = function (args) {\n        var _this = this;\n        var actionArgs = {\n            requestType: args.requestType, cancel: false, data: args.data,\n            addedRecords: args.editParms.addedRecords, changedRecords: args.editParms.changedRecords,\n            deletedRecords: args.editParms.deletedRecords\n        };\n        if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {\n            this.parent.dragAndDropModule.actionObj.element.style.display = 'none';\n        }\n        if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {\n            this.parent.resizeModule.actionObj.element.style.display = 'none';\n        }\n        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.activeViewOptions.group.allowGroupEdit\n            && !this.parent.rowAutoHeight && !this.parent.virtualScrollModule && this.parent.activeViewOptions.group.byGroupID) {\n            if (args.requestType === 'eventCreated' || args.requestType === 'eventRemoved') {\n                this.crudObj.isCrudAction = true;\n                this.crudObj.sourceEvent = [];\n                var crudData = (args.data instanceof Array ? args.data : ((typeof args.data === 'string' || typeof args.data === 'number') &&\n                    args.requestType === 'eventRemoved') ? args.editParms.deletedRecords : [args.data]);\n                var _loop_1 = function (data) {\n                    this_1.crudObj.isCrudAction = !(args.requestType === 'eventRemoved' && !isNullOrUndefined(data.parent));\n                    var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data);\n                    if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function (tdData) { return tdData.groupIndex === groupIndex; }).length === 0\n                        && this_1.crudObj.isCrudAction) {\n                        this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[groupIndex]);\n                    }\n                };\n                var this_1 = this;\n                for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {\n                    var data = crudData_1[_i];\n                    _loop_1(data);\n                }\n                this.crudObj.targetEvent = this.crudObj.sourceEvent;\n            }\n        }\n        if (this.parent.dataModule.dataManager.dataSource.offline) {\n            this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n                if (!offlineArgs.cancel) {\n                    _this.parent.renderModule.refreshDataManager();\n                }\n            });\n        }\n        else {\n            args.promise.then(function (e) {\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {\n                    if (!onlineArgs.cancel) {\n                        _this.parent.renderModule.refreshDataManager();\n                    }\n                });\n            }).catch(function (e) {\n                if (_this.parent.isDestroyed) {\n                    return;\n                }\n                // tslint:disable:no-any\n                _this.parent.trigger(events.actionFailure, { error: isBlazor() ? e.error.toString() : e });\n                // tslint:disable:no-any\n            });\n        }\n    };\n    Crud.prototype.addEvent = function (eventData) {\n        var _this = this;\n        if (this.parent.eventSettings.allowAdding) {\n            if (!this.isBlockEvent(eventData) &&\n                this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', (eventData instanceof Array) ? [eventData] : eventData);\n                return;\n            }\n            var addEvents = (eventData instanceof Array) ? eventData : [eventData];\n            var args = {\n                requestType: 'eventCreate', cancel: false,\n                addedRecords: addEvents, changedRecords: [], deletedRecords: []\n            };\n            if (!isBlazor()) {\n                args.data = addEvents;\n            }\n            this.parent.trigger(events.actionBegin, args, function (addArgs) {\n                _this.serializeData(addArgs.addedRecords);\n                if (!addArgs.cancel) {\n                    var fields = _this.parent.eventFields;\n                    var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                    var promise = void 0;\n                    if (addArgs.addedRecords instanceof Array) {\n                        for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n                            var event_1 = _a[_i];\n                            editParms.addedRecords.push(_this.parent.eventBase.processTimezone(event_1, true));\n                        }\n                        // tslint:disable-next-line:max-line-length\n                        promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                    }\n                    else {\n                        var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n                        editParms.addedRecords.push(event_2);\n                        promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n                    }\n                    var crudArgs = {\n                        requestType: 'eventCreated', cancel: false, data: addArgs.addedRecords, promise: promise, editParms: editParms\n                    };\n                    _this.refreshData(crudArgs);\n                }\n            });\n        }\n    };\n    Crud.prototype.saveEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowEditing) {\n            if (this.parent.currentAction !== 'EditFollowingEvents' && !this.isBlockEvent(eventData)\n                && this.parent.eventBase.isBlockRange(eventData)) {\n                this.parent.quickPopup.openValidationError('blockAlert', (eventData instanceof Array) ? [eventData] : eventData);\n                return;\n            }\n            this.parent.currentAction = action;\n            if (action) {\n                switch (action) {\n                    case 'EditOccurrence':\n                        this.processOccurrences(eventData, action);\n                        break;\n                    case 'EditFollowingEvents':\n                        this.processFollowSeries(eventData, action);\n                        break;\n                    case 'EditSeries':\n                        this.processEntireSeries(eventData, action);\n                        break;\n                }\n            }\n            else {\n                var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n                var args = {\n                    requestType: 'eventChange', cancel: false,\n                    addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n                };\n                if (!isBlazor()) {\n                    args.data = eventData;\n                }\n                this.parent.trigger(events.actionBegin, args, function (saveArgs) {\n                    _this.serializeData(saveArgs.changedRecords);\n                    if (!saveArgs.cancel) {\n                        var promise = void 0;\n                        var fields = _this.parent.eventFields;\n                        var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                        if (saveArgs.changedRecords instanceof Array) {\n                            for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                                var event_3 = _a[_i];\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(event_3, true));\n                            }\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                        }\n                        else {\n                            var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n                            editParms.changedRecords.push(event_4);\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n                        }\n                        var crudArgs = {\n                            requestType: 'eventChanged', cancel: false,\n                            data: saveArgs.changedRecords, promise: promise, editParms: editParms\n                        };\n                        _this.refreshData(crudArgs);\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.deleteEvent = function (eventData, action) {\n        var _this = this;\n        if (this.parent.eventSettings.allowDeleting) {\n            this.parent.currentAction = action;\n            var deleteEvents = [];\n            if (typeof eventData === 'string' || typeof eventData === 'number') {\n                deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n                    return eventObj[_this.parent.eventFields.id] === eventData;\n                });\n            }\n            else {\n                deleteEvents = (eventData instanceof Array ? eventData : [eventData]);\n            }\n            if (action) {\n                switch (action) {\n                    case 'Delete':\n                        this.processEventDelete(deleteEvents);\n                        break;\n                    case 'DeleteOccurrence':\n                        this.processOccurrences(deleteEvents, action);\n                        break;\n                    case 'DeleteFollowingEvents':\n                        this.processFollowSeries(deleteEvents, action);\n                        break;\n                    case 'DeleteSeries':\n                        this.processEntireSeries(deleteEvents, action);\n                        break;\n                }\n            }\n            else {\n                var args = {\n                    requestType: 'eventRemove', cancel: false,\n                    addedRecords: [], changedRecords: [], deletedRecords: deleteEvents\n                };\n                if (!isBlazor()) {\n                    args.data = eventData;\n                }\n                this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n                    _this.serializeData(deleteArgs.deletedRecords);\n                    if (!deleteArgs.cancel) {\n                        var promise = void 0;\n                        var fields = _this.parent.eventFields;\n                        var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                        if (deleteArgs.deletedRecords.length > 1) {\n                            editParms.deletedRecords = editParms.deletedRecords.concat(deleteArgs.deletedRecords);\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                        }\n                        else {\n                            editParms.deletedRecords.push(deleteArgs.deletedRecords[0]);\n                            // tslint:disable-next-line:max-line-length\n                            promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n                        }\n                        _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n                        var crudArgs = {\n                            requestType: 'eventRemoved', cancel: false,\n                            data: deleteArgs.deletedRecords, promise: promise, editParms: editParms\n                        };\n                        _this.refreshData(crudArgs);\n                    }\n                });\n            }\n        }\n    };\n    Crud.prototype.processOccurrences = function (eventData, action) {\n        var _this = this;\n        var occurenceData = [];\n        var isDeletedRecords = false;\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {\n                var event_5 = eventData_1[_i];\n                occurenceData.push({ occurrence: event_5, parent: this.getParentEvent(event_5) });\n            }\n        }\n        else {\n            occurenceData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = occurenceData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (occurenceArgs) {\n            _this.serializeData(occurenceArgs.changedRecords);\n            if (!occurenceArgs.cancel) {\n                var fields = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var occurrenceEvents = (occurenceData instanceof Array ? occurenceData : [occurenceData]);\n                var _loop_2 = function (a, count) {\n                    var childEvent = occurenceArgs.changedRecords[a];\n                    var parentEvent = occurrenceEvents[a].parent;\n                    var parentException = parentEvent[fields.recurrenceException];\n                    switch (action) {\n                        case 'EditOccurrence':\n                            var editedData = _this.parent.eventsProcessed.filter(function (event) { return event.Guid === childEvent.Guid; })[0];\n                            var exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n                            if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] = exceptionDate;\n                                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                                childEvent[fields.followingID] = null;\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                                editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            else {\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            }\n                            break;\n                        case 'DeleteOccurrence':\n                            if (!childEvent[fields.recurrenceException]) {\n                                parentEvent[fields.recurrenceException] =\n                                    _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                                editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            }\n                            if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                                editParms.deletedRecords.push(childEvent);\n                                isDeletedRecords = true;\n                            }\n                            break;\n                    }\n                };\n                for (var a = 0, count = occurenceArgs.changedRecords.length; a < count; a++) {\n                    _loop_2(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(occurenceArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: isDeletedRecords ? occurenceArgs.deletedRecords : occurenceArgs.changedRecords,\n                    promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processFollowSeries = function (eventData, action) {\n        var _this = this;\n        var followData = [];\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_2 = eventData; _i < eventData_2.length; _i++) {\n                var event_6 = eventData_2[_i];\n                followData.push({ occurrence: event_6, parent: this.getParentEvent(event_6) });\n            }\n        }\n        else {\n            followData = { occurrence: eventData, parent: this.getParentEvent(eventData) };\n        }\n        var updateFollowEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateFollowEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = followData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (followArgs) {\n            _this.serializeData(followArgs.changedRecords);\n            if (!followArgs.cancel) {\n                var fields_1 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var followEvents = (followData instanceof Array ? followData : [followData]);\n                var _loop_3 = function (a, count) {\n                    var childEvent = followArgs.changedRecords[a];\n                    var parentEvent = followEvents[a].parent;\n                    var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n                    switch (action) {\n                        case 'EditFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent);\n                            var isSplitted = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n                            childEvent[fields_1.followingID] = isSplitted ? null : parentEvent[fields_1.id];\n                            childEvent[fields_1.recurrenceID] = null;\n                            editParms.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                                childEvent[fields_1.recurrenceException] = null;\n                                if (followData_1.occurrence.length > 0) {\n                                    var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n                                    if (rule.indexOf('COUNT') === -1) {\n                                        childEvent[fields_1.recurrenceRule] = rule;\n                                    }\n                                }\n                                if (followData_1.follow.length > 0) {\n                                    childEvent[fields_1.recurrenceRule] =\n                                        followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                                    editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.follow);\n                                }\n                                if (isSplitted) {\n                                    followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                                        return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                                    });\n                                }\n                                editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence);\n                            }\n                            break;\n                        case 'DeleteFollowingEvents':\n                            _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                            editParms.deletedRecords = editParms.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n                            break;\n                    }\n                };\n                for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n                    _loop_3(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_1.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: followArgs.changedRecords, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processEntireSeries = function (eventData, action) {\n        var _this = this;\n        var seriesData = [];\n        var isDeletedRecords = false;\n        if (eventData instanceof Array) {\n            for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n                var event_7 = eventData_3[_i];\n                seriesData.push(this.getParentEvent(event_7, true));\n            }\n        }\n        else {\n            seriesData = this.getParentEvent(eventData, true);\n        }\n        var updateSeriesEvents = (eventData instanceof Array) ? eventData : [eventData];\n        var args = {\n            requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: updateSeriesEvents, deletedRecords: []\n        };\n        if (!isBlazor()) {\n            args.data = seriesData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (seriesArgs) {\n            _this.serializeData(seriesArgs.changedRecords);\n            if (!seriesArgs.cancel) {\n                var fields_2 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var seriesEvents = (seriesData instanceof Array ? seriesData : [seriesData]);\n                var _loop_4 = function (a, count) {\n                    var childEvent = seriesArgs.changedRecords[a];\n                    var parentEvent = seriesEvents[a];\n                    var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n                    var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n                    switch (action) {\n                        case 'EditSeries':\n                            if (childEvent[fields_2.startTime] > parentEvent[fields_2.startTime]) {\n                                _this.processRecurrenceRule(parentEvent, childEvent);\n                            }\n                            childEvent[fields_2.id] = parentEvent[fields_2.id];\n                            childEvent[fields_2.recurrenceID] = null;\n                            childEvent[fields_2.followingID] = null;\n                            if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                                    return eventObj[fields_2.id] === childEvent[fields_2.id];\n                                });\n                                if (originalParent.length > 0) {\n                                    childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                                }\n                            }\n                            else {\n                                childEvent[fields_2.recurrenceException] = null;\n                                editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents);\n                            }\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n                            _this.parent.uiStateValues.isIgnoreOccurrence = false;\n                            break;\n                        case 'DeleteSeries':\n                            editParms.deletedRecords = editParms.deletedRecords.concat(deletedEvents.concat(parentEvent));\n                            isDeletedRecords = true;\n                            break;\n                    }\n                };\n                for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n                    _loop_4(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_2.id, _this.getTable(), _this.getQuery());\n                _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n                var crudArgs = {\n                    requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n                    cancel: false, data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,\n                    promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.processEventDelete = function (eventData) {\n        var _this = this;\n        var deleteData = [];\n        for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n            var eventObj = eventData_4[_i];\n            if (eventObj[this.parent.eventFields.recurrenceRule]) {\n                deleteData.push({ occurrence: eventObj, parent: this.getParentEvent(eventObj) });\n            }\n            else {\n                deleteData.push(eventObj);\n            }\n        }\n        var args = {\n            requestType: 'eventRemove', cancel: false,\n            addedRecords: [], changedRecords: [], deletedRecords: eventData\n        };\n        if (!isBlazor()) {\n            args.data = deleteData;\n        }\n        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {\n            _this.serializeData(deleteArgs.deletedRecords);\n            if (!deleteArgs.cancel) {\n                var fields_3 = _this.parent.eventFields;\n                var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };\n                var _loop_5 = function (a, count) {\n                    var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[a][_this.parent.eventFields.recurrenceRule]);\n                    if (!isDelete) {\n                        var parentEvent_1 = deleteData[a].parent;\n                        var isEdited = editParms.changedRecords.filter(function (obj) {\n                            return obj[fields_3.id] === parentEvent_1[fields_3.id];\n                        });\n                        var editedDate = deleteArgs.deletedRecords[a][fields_3.startTime];\n                        if (isEdited.length > 0) {\n                            var editedData = isEdited[0];\n                            editedData[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n                        }\n                        else {\n                            parentEvent_1[fields_3.recurrenceException] =\n                                _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n                        }\n                        if (isEdited.length === 0) {\n                            editParms.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n                        }\n                        isDelete = (deleteArgs.deletedRecords[a][fields_3.id] !== parentEvent_1[fields_3.id]);\n                    }\n                    if (isDelete) {\n                        editParms.deletedRecords.push(deleteArgs.deletedRecords[a]);\n                    }\n                };\n                for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n                    _loop_5(a, count);\n                }\n                // tslint:disable-next-line:max-line-length\n                var promise = _this.parent.dataModule.dataManager.saveChanges(editParms, fields_3.id, _this.getTable(), _this.getQuery());\n                var crudArgs = {\n                    requestType: 'eventRemoved', cancel: false, data: deleteArgs.deletedRecords, promise: promise, editParms: editParms\n                };\n                _this.refreshData(crudArgs);\n            }\n        });\n    };\n    Crud.prototype.serializeData = function (eventData) {\n        if (isBlazor()) {\n            var eventFields = this.parent.eventFields;\n            for (var _i = 0, _a = eventData; _i < _a.length; _i++) {\n                var event_8 = _a[_i];\n                event_8[eventFields.startTime] = this.parent.getDateTime(event_8[eventFields.startTime]);\n                event_8[eventFields.endTime] = this.parent.getDateTime(event_8[eventFields.endTime]);\n            }\n        }\n    };\n    Crud.prototype.getParentEvent = function (event, isParent) {\n        if (isParent === void 0) { isParent = false; }\n        var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n        if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n            this.parent.eventBase.timezoneConvert(parentEvent);\n        }\n        return parentEvent;\n    };\n    Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n        var exDate = getRecurrenceStringFromDate(eventStartTime);\n        if (!isNullOrUndefined(exceptionDateList)) {\n            if (exceptionDateList.indexOf(exDate) === -1) {\n                exceptionDateList = !(isNullOrUndefined(exceptionDateList)) ? exceptionDateList + ',' + exDate : exDate;\n            }\n        }\n        else {\n            exceptionDateList = exDate;\n        }\n        return exceptionDateList;\n    };\n    Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n        var fields = this.parent.eventFields;\n        var recurrenceRule = parentEvent[fields.recurrenceRule];\n        var endDate;\n        if (followEvent instanceof Date) {\n            endDate = new Date(+followEvent);\n        }\n        else {\n            endDate = new Date(+followEvent[fields.startTime]);\n            var newRecurrenceRule = followEvent[fields.recurrenceRule];\n            var startDate = parentEvent[fields.startTime];\n            var ruleException = (this.parent.currentAction === 'DeleteFollowingEvents') ? followEvent[fields.recurrenceException] : null;\n            var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n            var untilDate = new Date(dateCollection.slice(-1)[0]);\n            untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());\n            endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());\n            followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, new Date(+untilDate), false);\n        }\n        parentEvent[fields.recurrenceRule] =\n            this.getUpdatedRecurrenceRule(recurrenceRule, util.addDays(new Date(endDate.getTime()), -1), true);\n    };\n    Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n        var splitRule = recurrenceRule.split(';');\n        var updatedRule = '';\n        for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n            var rule = splitRule_1[_i];\n            if (rule !== '') {\n                var ruleKey = rule.split('=')[0];\n                var ruleValue = rule.split('=')[1];\n                if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n                    ruleValue = getRecurrenceStringFromDate(untilDate);\n                    rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n                }\n                updatedRule += rule + ';';\n            }\n        }\n        if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n            updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n        }\n        return updatedRule;\n    };\n    Crud.prototype.isBlockEvent = function (eventData) {\n        var eventCollection = (eventData instanceof Array) ? eventData : [eventData];\n        var value = false;\n        for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n            var event_9 = eventCollection_1[_i];\n            value = event_9[this.parent.eventFields.isBlock] || false;\n        }\n        return value;\n    };\n    return Crud;\n}());\nexport { Crud };\n"]},"metadata":{},"sourceType":"module"}